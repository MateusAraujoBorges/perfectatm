import "atm.pd";
import "card.pd";
import "cardreader.pd";

class Session ^=
abstract
	class SessionState ^= enum readingCard,readingPin,choosingTransaction, performingTransaction,ejectingCard,finalState end;
	var pin : int; //negative value means that the user still hasn't informed his pin
	var atm : ATM;
	var state : SessionState;
	var dummyReader:CardReader;
	var dummyCard:Card;

confined

	//state methods
	schema !readingCardState
	       pre self.state = readingCard@SessionState,
		   	   self.atm.cardReader.state = noCard@CardReaderStatus
	       post (
		   		dummyReader! = atm.cardReader
//				then dummyReader!readCard(dummyCard!)
				then dummyReader!readCard
	       		then !readingCardStateHelper(dummyReader.card)
				);

	schema !readingCardStateHelper(card : Card)
	 	   pre self.state = readingCard@SessionState,
		   card.isUnreadable ==> (self.dummyReader.state = withCard@CardReaderStatus)
	 	   post ( 
	 	    	 [card.isUnreadable]: //eject it
	 			 		dummyReader!ejectCard,
	 					state! = ejectingCard@SessionState,
	 			 []: 
	 					state! = readingPin@SessionState
	 			 );


property assert (self.state = readingCard@SessionState & self.atm.cardReader.state = noCard@CardReaderStatus) ==> (self after it!readingCardState).state in set of SessionState{ejectingCard@SessionState,readingPin@SessionState};

	
interface

	build{atmin:ATM}
		post atm != atmin, state != readingCard@SessionState, pin != -1, dummyCard!= Card{-1}, dummyReader != CardReader{};

	schema !setPIN(inpin:int) 
	       pre (inpin > 0)
	       post pin! = inpin;

	//schema dispatch //call apropriate event handler for each state.
	//schema errorDispatch //call apropriate exception event handler for each state.	       

end;


































